package com.example.testapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.testapplication.ui.theme.TestApplicationTheme
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TestApplicationTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    SimulatedSensorApp(modifier = Modifier.padding(innerPadding))
                }
            }
        }
    }
}

@Composable
fun SimulatedSensorApp(modifier: Modifier = Modifier) {
    var isStreaming by remember { mutableStateOf(false) }
    var heartRate by remember { mutableStateOf(75) } // start at 75 bpm
    val coroutineScope = rememberCoroutineScope()

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text("Simulated Heart Rate Monitor", fontSize = 22.sp, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(24.dp))

        Text(
            text = "$heartRate bpm",
            fontSize = 60.sp,
            fontWeight = FontWeight.Bold
        )

        Spacer(modifier = Modifier.height(24.dp))

        Button(
            onClick = {
                isStreaming = !isStreaming
                if (isStreaming) {
                    coroutineScope.launch {
                        while (isStreaming) {
                            // Simulate new data every 1 second
                            heartRate = Random.nextInt(60, 120)
                            delay(1000)
                        }
                    }
                }
            }
        ) {
            Text(if (isStreaming) "Stop Stream" else "Start Stream")
        }
    }
}
